generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum User_Type_Enum {
  dashboard_user
  api_user
}

enum CommunicationLogChannel {
  email
  sms
  whatsapp
}

enum CommunicationLogStatus {
  pending
  sent
  failed
}

enum MotorQuoteStatus {
  approved
  cancelled
  pending
}

enum ProductType {
  nonhealth
  health
  travel
}

model User {
  id                   Int            @id @default(autoincrement())
  fullname             String
  email                String         @unique
  phone                String         @unique @db.VarChar(20)
  image                String         @default("default-user.png")
  username             String         @unique
  user_type            User_Type_Enum @default(dashboard_user)
  is_admin             Boolean        @default(true)
  is_active            Boolean        @default(true)
  is_deleted           Boolean        @default(false)
  email_verified_at    DateTime?
  failed_attempt       Int            @default(0)
  lock_time            DateTime?
  last_login_date      DateTime?
  last_password_change DateTime?
  is_locked            Boolean        @default(false)
  otp_token            String?        @db.VarChar(10)
  otp_time             DateTime?
  password             String
  remember_token       String?
  created_by           Int
  deleted_by           Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user_menu_rights         UserMenuRight[]
  ApiUser                  ApiUser[]
  plansCreated             Plan[]            @relation("PlanCreatedBy")
  plansDeleted             Plan[]            @relation("PlanDeletedBy")
  productCategoriesCreated ProductCategory[] @relation("ProductCategoryCreatedBy")
  productCategoriesDeleted ProductCategory[] @relation("ProductCategoryDeletedBy")
  productsCreated          Product[]         @relation("ProductCreatedBy")
  productsDeleted          Product[]         @relation("ProductDeletedBy")
  productOptionsCreated    ProductOption[]   @relation("ProductOptionCreatedBy")
  productOptionsDeleted    ProductOption[]   @relation("ProductOptionDeletedBy")

  @@fulltext([username, fullname, email, phone])
}

model ApiUser {
  id           Int     @id @default(autoincrement())
  name         String
  api_password String
  email        String  @unique
  phone        String
  api_key      String  @unique
  is_active    Boolean @default(true)
  is_deleted   Boolean @default(false)
  created_by   Int
  deleted_by   Int?
  user_id      Int     @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [id])
}

model Menu {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.VarChar(100)
  parent_id   Int?
  url         String? @db.VarChar(255)
  icon        String? @db.VarChar(100)
  sorting     Int     @default(0)
  created_by  Int
  deleted_by  Int?
  is_active   Boolean @default(true)
  is_deleted  Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  parent           Menu?           @relation("menu_children", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children         Menu[]          @relation("menu_children")
  user_menu_rights UserMenuRight[]
}

model UserMenuRight {
  id         Int      @id @default(autoincrement())
  user_id    Int
  menu_id    Int
  can_view   Boolean  @default(true)
  can_create Boolean  @default(false)
  can_edit   Boolean  @default(false)
  can_delete Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@unique([user_id, menu_id])
}

model Branch {
  id                       Int     @id @default(autoincrement())
  name                     String  @db.VarChar(100)
  igis_branch_code         String  @unique @db.VarChar(8)
  igis_branch_takaful_code String  @unique @db.VarChar(8)
  address                  String  @db.VarChar(200)
  telephone                String  @db.VarChar(15)
  email                    String  @db.VarChar(100)
  his_code                 String  @unique @db.VarChar(10)
  his_code_takaful         String  @unique @db.VarChar(10)
  sales_tax_perc           Decimal @db.Decimal(5, 2)
  fed_insurance_fee        Decimal @db.Decimal(5, 2)
  stamp_duty               Int
  admin_rate               Decimal @db.Decimal(5, 2)
  is_active                Boolean @default(true)
  is_deleted               Boolean @default(false)
  created_by               Int?
  deleted_by               Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  DevelopmentOfficer DevelopmentOfficer[]
  Agent              Agent[]
  Client             Client[]
  MotorQuote         MotorQuote[]
}

model DevelopmentOfficer {
  id           Int     @id @default(autoincrement())
  branch_id    Int
  name         String  @db.VarChar(100)
  igis_do_code String  @unique @db.VarChar(8)
  igis_code    String? @db.VarChar(10)
  is_active    Boolean @default(true)
  is_deleted   Boolean @default(false)
  created_by   Int?
  deleted_by   Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch Branch  @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  Agent  Agent[]

  @@index([branch_id], name: "idx_branch_id")
}

model Agent {
  id                     Int     @id @default(autoincrement())
  name                   String  @db.VarChar(100)
  igis_code              String? @db.VarChar(10)
  igis_agent_code        String  @unique @db.VarChar(10)
  branch_id              Int
  development_officer_id Int
  idev_affiliate         Boolean @default(false)
  idev_id                Int?
  is_active              Boolean @default(true)
  is_deleted             Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch              Branch             @relation(fields: [branch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  development_officer DevelopmentOfficer @relation(fields: [development_officer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  MotorQuote          MotorQuote[]

  @@index([branch_id], name: "idx_branch_id")
  @@index([development_officer_id], name: "idx_development_officer_id")
  @@index([igis_agent_code], name: "idx_agent_code")
}

model Client {
  id               Int    @id @default(autoincrement())
  name             String @db.VarChar(100)
  igis_client_code String @unique @db.VarChar(10)
  address          String @db.VarChar(200)
  telephone        String @db.VarChar(15)
  contact_person   String @db.VarChar(100)

  branch_id  Int
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch Branch @relation(fields: [branch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([branch_id], name: "idx_branch_id")
  @@index([igis_client_code], name: "idx_code")
}

model Courier {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(50)
  api_code       String  @db.VarChar(100)
  account_number String  @unique @db.VarChar(100)
  user           String  @db.VarChar(100)
  password       String  @db.VarChar(100)
  book_url       String? @db.VarChar(255)
  tracking_url   String? @db.VarChar(255)
  is_takaful     Boolean @default(false)
  is_active      Boolean @default(true)
  is_deleted     Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([name], name: "idx_name")
  @@index([account_number], name: "idx_account_number")
}

model Country {
  id                Int     @id @default(autoincrement())
  igis_country_code String? @db.VarChar(50)
  country_name      String  @db.VarChar(100)
  country_code      String  @unique @db.VarChar(5)
  is_active         Boolean @default(true)

  created_by Int
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  City City[]
}

model City {
  id             Int     @id @default(autoincrement())
  country_id     Int
  igis_city_code String? @db.VarChar(50)
  city_name      String  @db.VarChar(100)
  city_code      String  @unique @db.VarChar(5)
  priority       Int     @default(0)
  is_tcs         Boolean @default(false)
  is_blueEx      Boolean @default(false)
  is_leopard     Boolean @default(false)
  is_active      Boolean @default(true)

  created_by Int
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  country    Country      @relation(fields: [country_id], references: [id])
  MotorQuote MotorQuote[]
}

model CallUsData {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  contact   String? @db.VarChar(20)
  email     String  @db.VarChar(255)
  is_active Boolean @default(true)

  created_by Int?
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model BusinessRegion {
  id                        Int     @id @default(autoincrement())
  business_region_name      String  @db.VarChar(100)
  igis_business_region_code String  @unique @db.VarChar(4)
  is_active                 Boolean @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model IgisMake {
  id             Int     @id @default(autoincrement())
  make_name      String  @db.VarChar(100)
  igis_make_code String  @unique @db.VarChar(4)
  is_active      Boolean @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  IgisSubMake IgisSubMake[]
}

model IgisSubMake {
  id                 Int      @id @default(autoincrement())
  make_id            Int
  sub_make_name      String   @db.VarChar(100)
  igis_sub_make_code String   @unique @db.VarChar(4)
  seating_capacity   Int?
  cubic_capacity     Decimal? @db.Decimal(10, 2)
  coi_type_code      String?  @db.VarChar(50)
  is_active          Boolean  @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  make IgisMake @relation(fields: [make_id], references: [id])
}

model MotorQuote {
  id              Int     @id @default(autoincrement())
  quote_id        String  @unique @db.VarChar(50)
  policy_type     String? @db.VarChar(50)
  name            String  @db.VarChar(50)
  mobile          String? @db.VarChar(50)
  email           String? @db.VarChar(50)
  premium_value   Int?
  rate            Int?
  vehicle_make    String? @db.VarChar(50)
  vehicle_submake String? @db.VarChar(50)
  vehicle_model   String? @db.VarChar(50)
  vehicle_value   String? @db.VarChar(50)
  vehicle_track   String? @db.VarChar(50)
  vehicle_body    String? @db.VarChar(50)
  vehicle_color   String? @db.VarChar(50)

  reg_no     String? @db.VarChar(50)
  engine_no  String? @db.VarChar(50)
  chassis_no String? @db.VarChar(50)

  status MotorQuoteStatus @default(pending)

  city_id   Int?
  agent_id  Int?
  branch_id Int?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  city   City?   @relation(fields: [city_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  agent  Agent?  @relation(fields: [agent_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch Branch? @relation(fields: [branch_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Plan {
  id         Int     @id @default(autoincrement())
  name       String  @unique @db.VarChar(100)
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  createdBy User  @relation("PlanCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User? @relation("PlanDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([created_by])
  @@index([deleted_by])
}

model ProductCategory {
  id                Int     @id @default(autoincrement())
  name              String  @db.VarChar(50)
  igis_product_code String  @unique @db.VarChar(8)
  department_id     Int?
  is_active         Boolean @default(true)
  is_deleted        Boolean @default(false)
  created_by        Int
  deleted_by        Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User      @relation("ProductCategoryCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?     @relation("ProductCategoryDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  products  Product[]

  @@index([created_by])
  @@index([deleted_by])
}

model Product {
  id                  Int         @id @default(autoincrement())
  product_name        String      @unique @db.VarChar(100)
  product_type        ProductType
  product_category_id Int

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  productCategory ProductCategory @relation(fields: [product_category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy       User            @relation("ProductCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy       User?           @relation("ProductDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  productOptions ProductOption[]

  @@index([product_category_id])
  @@index([created_by])
  @@index([deleted_by])
}

model ProductOption {
  id                        Int     @id @default(autoincrement())
  product_id                Int
  option_name               String  @db.VarChar(100)
  price                     Decimal @db.Decimal(10, 2)
  duration_type             String  @db.VarChar(20)
  duration                  Int
  start_limit               Int
  end_limit                 Int
  stamp_duty                Int
  sales_tax                 Int
  federal_insurance_fee     Int
  gross_premium             Int
  subtotal                  Int
  administrative_subcharges Int
  start_limit_mother        Int
  end_limit_mother          Int
  plan_code                 String? @db.VarChar(45)
  is_active                 Boolean @default(true)
  is_deleted                Boolean @default(false)
  created_by                Int
  deleted_by                Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  product   Product @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy User    @relation("ProductOptionCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?   @relation("ProductOptionDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([product_id])
  @@index([created_by])
  @@index([deleted_by])
}

// PUT LOGS TABLES HERE UNDER THIS COMMENT
model AllActivityLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  method        String?
  path          String?
  contentLength Int?
  responseTime  Float?
  requestBody   String?
  payload       String?  @db.LongText
  databaseQuery String?  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunicationLog {
  id             Int                     @id @default(autoincrement())
  recipient      String                  @db.VarChar(255)
  recipientName  String?                 @db.VarChar(255)
  channel        CommunicationLogChannel
  messageSubject String?                 @db.VarChar(255)
  messageBody    String                  @db.LongText
  status         CommunicationLogStatus  @default(pending)
  responseCode   String?                 @db.VarChar(255)
  responseBody   String?                 @db.Text
  sentBy         String?                 @db.VarChar(255)
  sentAt         DateTime?
  createdAt      DateTime                @default(now())
  errorMessage   String?                 @db.Text

  @@index([channel, status], name: "idx_channel_status")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum User_Type_Enum {
  dashboard_user
  api_user
}

enum CommunicationLogChannel {
  email
  sms
  whatsapp
}

enum CommunicationLogStatus {
  pending
  sent
  failed
}

enum MotorQuoteStatus {
  approved
  cancelled
  pending
}

enum ProductTypeEnum {
  nonhealth
  health
  travel
  motor
  home
  purchase_protection
}

enum LeadStatus {
  pending
  waiting
  interested
  not_interested
  callback_scheduled
  cancelled
}

enum YesNoEnum {
  yes
  no
}

enum DurationTypeEnum {
  days
  months
  years
}

enum CouponTypeEnum {
  percentage
  flat
  other
}

enum OrderStatus {
  accepted
  cancelled
  pendingCOD
  rejected
  unverified
  verified
  pending
}

enum PolicyStatus {
  cancelled
  HISposted
  IGISposted
  pendingIGIS
  unverified
  pending
  pendingCOD
  pendingCBO
  expired
}

enum Gender {
  male
  female
}

enum DurationType {
  days
  months
  years
}

model User {
  id                   Int            @id @default(autoincrement())
  fullname             String
  email                String
  phone                String         @db.VarChar(20)
  image                String         @default("default-user.png")
  username             String         @unique
  user_type            User_Type_Enum @default(dashboard_user)
  is_admin             Boolean        @default(true)
  is_active            Boolean        @default(true)
  is_deleted           Boolean        @default(false)
  email_verified_at    DateTime?
  failed_attempt       Int            @default(0)
  lock_time            DateTime?
  last_login_date      DateTime?
  last_password_change DateTime?
  is_locked            Boolean        @default(false)
  otp_token            String?        @db.VarChar(10)
  otp_time             DateTime?
  password             String
  remember_token       String?
  created_by           Int
  deleted_by           Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user_menu_rights              UserMenuRight[]
  ApiUser                       ApiUser[]
  plansCreated                  Plan[]                     @relation("PlanCreatedBy")
  plansDeleted                  Plan[]                     @relation("PlanDeletedBy")
  productCategoriesCreated      ProductCategory[]          @relation("ProductCategoryCreatedBy")
  productCategoriesDeleted      ProductCategory[]          @relation("ProductCategoryDeletedBy")
  productsCreated               Product[]                  @relation("ProductCreatedBy")
  productsDeleted               Product[]                  @relation("ProductDeletedBy")
  productOptionsCreated         ProductOption[]            @relation("ProductOptionCreatedBy")
  productOptionsDeleted         ProductOption[]            @relation("ProductOptionDeletedBy")
  productTypesCreated           ProductType[]              @relation("ProductTypeCreatedBy")
  productTypesDeleted           ProductType[]              @relation("ProductTypeDeletedBy")
  relationMappingsCreated       RelationMapping[]          @relation("RelationMappingCreatedBy")
  relationMappingsDeleted       RelationMapping[]          @relation("RelationMappingDeletedBy")
  webappMappersCreated          WebappMapper[]             @relation("WebappMapperCreatedBy")
  webappMappersDeleted          WebappMapper[]             @relation("WebappMapperDeletedBy")
  leadInfoCreated               LeadInfo[]                 @relation("LeadInfoCreatedBy")
  leadMotorInfoCreated          LeadMotorInfo[]            @relation("LeadMotorInfoCreatedBy")
  apiUserCreated                ApiUserProduct[]           @relation("ApiUserProductCreatedBy")
  paymentModeCreated            PaymentMode[]              @relation("PaymentModeCreatedBy")
  paymentModeDeleted            PaymentMode[]              @relation("PaymentModeDeletedBy")
  PremiumRangeProtectionCreated PremiumRangeProtection[]   @relation("PremiumRangeProtectionCreatedBy")
  PremiumRangeProtectionDeleted PremiumRangeProtection[]   @relation("PremiumRangeProtectionDeletedBy")
  couponsCreated                Coupon[]                   @relation("CouponCreatedBy")
  couponsDeleted                Coupon[]                   @relation("CouponDeletedBy")
  ordersCreated                 Order[]
  Policy                        Policy[]
  PolicyDetail                  PolicyDetail[]
  PolicyTravel                  PolicyTravel[]
  PolicyHomecare                PolicyHomecare[]
  PolicyPurchaseProtection      PolicyPurchaseProtection[]
  FblPolicyRider                FblPolicyRider[]

  @@index([id])
  @@index([username], name: "idx_username")
  @@index([email], name: "idx_email")
  @@index([phone], name: "idx_phone")
  @@fulltext([username, fullname, email, phone])
}

model ApiUser {
  id           Int     @id @default(autoincrement())
  name         String
  api_password String
  email        String  @unique
  phone        String
  api_key      String  @unique
  is_active    Boolean @default(true)
  is_deleted   Boolean @default(false)
  created_by   Int
  deleted_by   Int?
  user_id      Int     @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user                   User                     @relation(fields: [user_id], references: [id])
  apiUserProducts        ApiUserProduct[]         @relation("ApiUserProduct")
  PremiumRangeProtection PremiumRangeProtection[]
  Order                  Order[]
  Policy                 Policy[]

  @@index([id])
  @@index([user_id], name: "idx_user_id")
}

model Menu {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.VarChar(100)
  parent_id   Int?
  url         String? @db.VarChar(255)
  icon        String? @db.VarChar(100)
  sorting     Int     @default(0)
  created_by  Int
  deleted_by  Int?
  is_active   Boolean @default(true)
  is_deleted  Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  parent           Menu?           @relation("menu_children", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children         Menu[]          @relation("menu_children")
  user_menu_rights UserMenuRight[]
}

model UserMenuRight {
  id         Int      @id @default(autoincrement())
  user_id    Int
  menu_id    Int
  can_view   Boolean  @default(true)
  can_create Boolean  @default(false)
  can_edit   Boolean  @default(false)
  can_delete Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@unique([user_id, menu_id])
}

model Branch {
  id                       Int     @id @default(autoincrement())
  name                     String  @db.VarChar(100)
  igis_branch_code         String  @db.VarChar(8)
  igis_branch_takaful_code String  @db.VarChar(8)
  address                  String  @db.VarChar(200)
  telephone                String  @db.VarChar(15)
  email                    String  @db.VarChar(100)
  his_code                 String  @db.VarChar(10)
  his_code_takaful         String  @db.VarChar(10)
  sales_tax_perc           Decimal @db.Decimal(5, 2)
  fed_insurance_fee        Decimal @db.Decimal(5, 2)
  stamp_duty               Int
  admin_rate               Decimal @db.Decimal(5, 2)
  is_active                Boolean @default(true)
  is_deleted               Boolean @default(false)
  created_by               Int?
  deleted_by               Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  DevelopmentOfficer DevelopmentOfficer[]
  Agent              Agent[]
  Client             Client[]
  MotorQuote         MotorQuote[]
  Order              Order[]

  @@index([id], name: "idx_branch_id")
  @@index([name], name: "idx_branch_name")
  @@index([igis_branch_code], name: "idx_branch_code")
  @@index([igis_branch_takaful_code], name: "idx_branch_takaful_code")
}

model DevelopmentOfficer {
  id           Int     @id @default(autoincrement())
  branch_id    Int
  name         String  @db.VarChar(100)
  igis_do_code String  @unique @db.VarChar(8)
  igis_code    String? @db.VarChar(10)
  is_active    Boolean @default(true)
  is_deleted   Boolean @default(false)
  created_by   Int?
  deleted_by   Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch Branch  @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  Agent  Agent[]
  Order  Order[]

  @@index([id], name: "idx_development_officer_id")
  @@index([branch_id], name: "idx_branch_id")
  @@index([igis_do_code], name: "idx_do_code")
}

model Agent {
  id                     Int     @id @default(autoincrement())
  name                   String  @db.VarChar(100)
  igis_code              String? @db.VarChar(10)
  igis_agent_code        String  @unique @db.VarChar(11)
  branch_id              Int
  development_officer_id Int
  idev_affiliate         Boolean @default(false)
  idev_id                Int?
  is_active              Boolean @default(true)
  is_deleted             Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch              Branch             @relation(fields: [branch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  development_officer DevelopmentOfficer @relation(fields: [development_officer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  MotorQuote          MotorQuote[]
  Order               Order[]

  @@index([id], name: "idx_agent_id")
  @@index([branch_id], name: "idx_branch_id")
  @@index([development_officer_id], name: "idx_development_officer_id")
  @@index([igis_agent_code], name: "idx_agent_code")
}

model Client {
  id               Int    @id @default(autoincrement())
  name             String @db.VarChar(100)
  igis_client_code String @db.VarChar(18)
  address          String @db.VarChar(200)
  telephone        String @db.VarChar(15)
  contact_person   String @db.VarChar(100)

  branch_id  Int?
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  branch Branch? @relation(fields: [branch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Order  Order[]

  @@index([id], name: "idx_client_id")
  @@index([branch_id], name: "idx_branch_id")
  @@index([igis_client_code], name: "idx_code")
}

model Courier {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(50)
  api_code       String  @db.VarChar(100)
  account_number String  @unique @db.VarChar(100)
  user           String  @db.VarChar(100)
  password       String  @db.VarChar(100)
  book_url       String  @db.VarChar(255)
  tracking_url   String  @db.VarChar(255)
  is_takaful     Boolean @default(false)
  is_active      Boolean @default(true)
  is_deleted     Boolean @default(false)

  created_by Int?
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([id], name: "idx_courier_id")
  @@index([name], name: "idx_name")
  @@index([account_number], name: "idx_account_number")
}

model Country {
  id                Int     @id @default(autoincrement())
  igis_country_code String? @db.VarChar(50)
  country_name      String  @db.VarChar(100)
  country_code      String  @unique @db.VarChar(5)
  is_active         Boolean @default(true)

  created_by Int
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  City City[]

  @@index([id], name: "idx_country_id")
  @@index([country_code], name: "idx_country_code")
}

model City {
  id             Int     @id @default(autoincrement())
  country_id     Int
  igis_city_code String? @db.VarChar(50)
  city_name      String  @db.VarChar(100)
  city_code      String  @unique @db.VarChar(5)
  priority       Int     @default(0)
  is_tcs         Boolean @default(false)
  is_blueEx      Boolean @default(false)
  is_leopard     Boolean @default(false)
  is_active      Boolean @default(true)

  created_by Int
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  country    Country      @relation(fields: [country_id], references: [id])
  MotorQuote MotorQuote[]

  @@index([id], name: "idx_city_id")
  @@index([city_code], name: "idx_city_code")
}

model CallUsData {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  contact   String? @db.VarChar(20)
  email     String  @db.VarChar(255)
  is_active Boolean @default(true)

  created_by Int?
  deleted_by Int?

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([id], name: "idx_call_us_data_id")
}

model BusinessRegion {
  id                        Int     @id @default(autoincrement())
  business_region_name      String  @db.VarChar(100)
  igis_business_region_code String  @unique @db.VarChar(4)
  is_active                 Boolean @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([id], name: "idx_business_region_id")
  @@index([igis_business_region_code], name: "idx_business_region_code")
}

model IgisMake {
  id             Int     @id @default(autoincrement())
  make_name      String  @db.VarChar(100)
  igis_make_code String  @db.VarChar(4)
  is_active      Boolean @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  IgisSubMake IgisSubMake[]

  @@index([id], name: "idx_igis_make_id")
  @@index([igis_make_code], name: "idx_igis_make_code")
}

model IgisSubMake {
  id                 Int      @id @default(autoincrement())
  make_id            Int
  sub_make_name      String   @db.VarChar(100)
  igis_sub_make_code String   @db.VarChar(4)
  seating_capacity   Int?
  cubic_capacity     Decimal? @db.Decimal(10, 2)
  coi_type_code      String?  @db.VarChar(50)
  is_active          Boolean  @default(true)

  created_by Int?
  deleted_by Int? @default(0)

  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  make IgisMake @relation(fields: [make_id], references: [id])

  @@index([id], name: "idx_igis_sub_make_id")
  @@index([igis_sub_make_code], name: "idx_igis_sub_make_code")
}

model MotorQuote {
  id              Int     @id @default(autoincrement())
  quote_id        String  @unique @db.VarChar(50)
  policy_type     String? @db.VarChar(50)
  name            String  @db.VarChar(50)
  mobile          String? @db.VarChar(50)
  email           String? @db.VarChar(50)
  premium_value   Int?
  rate            Int?
  vehicle_make    String? @db.VarChar(50)
  vehicle_submake String? @db.VarChar(50)
  vehicle_model   String? @db.VarChar(50)
  vehicle_value   String? @db.VarChar(50)
  vehicle_track   String? @db.VarChar(50)
  vehicle_body    String? @db.VarChar(50)
  vehicle_color   String? @db.VarChar(50)

  reg_no     String? @db.VarChar(50)
  engine_no  String? @db.VarChar(50)
  chassis_no String? @db.VarChar(50)

  status MotorQuoteStatus @default(pending)

  city_id   Int?
  agent_id  Int?
  branch_id Int?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  city   City?   @relation(fields: [city_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  agent  Agent?  @relation(fields: [agent_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch Branch? @relation(fields: [branch_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([id], name: "idx_motor_quote_id")
  @@index([quote_id], name: "idx_quote_id")
}

model Plan {
  id         Int     @id @default(autoincrement())
  name       String  @unique @db.VarChar(100)
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  createdBy     User           @relation("PlanCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy     User?          @relation("PlanDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  webappMappers WebappMapper[]
  Policy        Policy[]

  @@index([id], name: "idx_plan_id")
  @@index([name], name: "idx_plan_name")
}

model ProductCategory {
  id                Int     @id @default(autoincrement())
  name              String  @db.VarChar(50)
  igis_product_code String  @db.VarChar(8)
  department_id     Int?
  product_code      String
  is_active         Boolean @default(true)
  is_deleted        Boolean @default(false)
  created_by        Int
  deleted_by        Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User      @relation("ProductCategoryCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?     @relation("ProductCategoryDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  products  Product[]

  @@index([id], name: "idx_product_category_id")
}

model Product {
  id                  Int             @id @default(autoincrement())
  product_name        String          @unique @db.VarChar(100)
  product_type        ProductTypeEnum
  product_category_id Int

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  productCategory ProductCategory @relation(fields: [product_category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy       User            @relation("ProductCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy       User?           @relation("ProductDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  productOptions ProductOption[]
  webappMappers  WebappMapper[]
  apiUserProduct ApiUserProduct[] @relation("Product")
  CouponProduct  CouponProduct[]
  Policy         Policy[]

  @@index([id], name: "idx_product_id")
  @@index([product_name], name: "idx_product_name")
  @@index([product_type], name: "idx_product_type")
}

model ProductOption {
  id                        Int     @id @default(autoincrement())
  product_id                Int
  option_name               String  @db.VarChar(100)
  price                     Decimal @db.Decimal(10, 2)
  duration_type             String  @db.VarChar(20)
  duration                  Int
  start_limit               Int
  end_limit                 Int
  stamp_duty                Int
  sales_tax                 Int
  federal_insurance_fee     Int
  gross_premium             Int
  subtotal                  Int
  administrative_subcharges Int
  start_limit_mother        Int
  end_limit_mother          Int
  plan_code                 String? @db.VarChar(45)
  is_active                 Boolean @default(true)
  is_deleted                Boolean @default(false)
  created_by                Int
  deleted_by                Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  product   Product @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy User    @relation("ProductOptionCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?   @relation("ProductOptionDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  webappMappers WebappMapper[]
  Policy        Policy[]

  @@index([product_id])
}

model ProductType {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(200)
  days       Int
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User? @relation("ProductTypeCreatedBy", fields: [created_by], references: [id], onDelete: Restrict)
  deletedBy User? @relation("ProductTypeDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull)

  @@index([id], name: "idx_product_type_id")
}

model RelationMapping {
  id         Int     @id @default(autoincrement())
  name       String? @db.VarChar(45)
  short_key  String? @db.VarChar(10)
  gender     String? @db.VarChar(15)
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User  @relation("RelationMappingCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User? @relation("RelationMappingDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([id], name: "idx_relation_mapping_id")
}

model WebappMapper {
  id         Int     @id @default(autoincrement())
  parent_sku String  @db.VarChar(200)
  child_sku  String  @db.VarChar(200)
  plan_id    Int
  product_id Int
  option_id  Int
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  plan           Plan          @relation(fields: [plan_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product        Product       @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_option ProductOption @relation(fields: [option_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy      User          @relation("WebappMapperCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy      User?         @relation("WebappMapperDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([plan_id], name: "idx_plan_id")
  @@index([product_id], name: "idx_product_id")
  @@index([option_id], name: "idx_option_id")
  @@index([created_by])
  @@index([deleted_by])
  @@index([parent_sku, child_sku], name: "idx_webappmapper_parentskuchildsku")
}

model LeadInfo {
  id                 Int        @id @default(autoincrement())
  name               String     @db.VarChar(255)
  dob                String?
  age                Int?
  mobile_num         String?    @db.VarChar(20)
  email_address      String?    @db.VarChar(255)
  spouse_dob         String?
  spouse_age         Int?
  kids               Int?
  family_kid1_dob    String?
  family_kid2_dob    String?
  family_kid3_dob    String?
  family_kid4_dob    String?
  product_type       String?    @db.VarChar(255)
  product_data       String?    @db.VarChar(255)
  product_sku        String?    @db.VarChar(255)
  travel_from        String?    @db.VarChar(255)
  travel_to          String?    @db.VarChar(255)
  travel_go          String?    @db.VarChar(100)
  travel_with        String?    @db.VarChar(100)
  travel_country     String?    @db.VarChar(255)
  from_date          String?
  end_date           String?
  duration           Int?
  insure_against     String?    @db.VarChar(255)
  insure_house       String?    @db.VarChar(255)
  insure_for         String?    @db.VarChar(255)
  insure_live        String?    @db.VarChar(255)
  insure_my          String?    @db.VarChar(255)
  insure_area        String?    @db.VarChar(255)
  insure_live_in     String?    @db.VarChar(255)
  parent_insurance   String?    @db.VarChar(255)
  parents_or_inlaw   String?    @db.VarChar(100)
  parents_mother_dob String?
  parents_father_dob String?
  status             LeadStatus @default(pending)
  created_by         Int

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User @relation("LeadInfoCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([id], name: "idx_lead_info_id")
}

model LeadMotorInfo {
  id                  Int        @id @default(autoincrement())
  full_name           String     @db.VarChar(255)
  policy_type         String?    @db.VarChar(255)
  mobile              String?    @db.VarChar(20)
  email               String?    @db.VarChar(255)
  vehicle_make        String?    @db.VarChar(100)
  vehicle_submake     String?    @db.VarChar(100)
  vehicle_model       String?    @db.VarChar(50)
  vehicle_value       Decimal?   @db.Decimal(15, 2)
  vehicle_track_yesno Boolean?
  vehicle_track       String?    @db.VarChar(50)
  premium             Decimal?   @db.Decimal(15, 2)
  status              LeadStatus @default(pending)
  created_by          Int

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User @relation("LeadMotorInfoCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([id], name: "idx_lead_motor_info_id")
}

model ApiUserProduct {
  id          Int @id @default(autoincrement())
  api_user_id Int
  product_id  Int
  created_by  Int

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  apiUser   ApiUser @relation("ApiUserProduct", fields: [api_user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product   Product @relation("Product", fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy User    @relation("ApiUserProductCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([id], name: "idx_api_user_product_id")
  @@index([product_id], name: "idx_api_user_product_product_id")
  @@index([api_user_id], name: "idx_api_user_product_user_id")
}

model PaymentMode {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(255)
  payment_code String @unique @db.VarChar(50)
  created_by   Int
  deleted_by   Int?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  createdBy User    @relation("PaymentModeCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?   @relation("PaymentModeDeletedBy", fields: [deleted_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Order     Order[]

  @@index([id], name: "idx_paymentmodeid")
}

model PremiumRangeProtection {
  id            Int              @id @default(autoincrement())
  premium_start String
  premium_end   String
  net_premium   String
  api_user_id   Int
  duration      Int
  duration_type DurationTypeEnum

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)
  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  apiUser   ApiUser @relation(fields: [api_user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy User    @relation("PremiumRangeProtectionCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy User?   @relation("PremiumRangeProtectionDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([id], name: "idx_premium_range_protection_id")
  @@index([api_user_id], name: "idx_api_user_id")
}

model Coupon {
  id               Int            @id @default(autoincrement())
  code             String         @unique @db.VarChar(50)
  campaign_name    String?        @db.VarChar(150)
  expiry_date      String
  application_date String?
  quantity         Int            @default(0)
  coupon_type      CouponTypeEnum @default(percentage)
  discount_value   String         @default("0.00")
  use_per_customer Int            @default(1)
  remaining        Int            @default(0)
  is_active        Boolean        @default(true)
  is_deleted       Boolean        @default(false)
  created_by       Int
  deleted_by       Int?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  deleted_at       DateTime?

  createdBy           User                  @relation("CouponCreatedBy", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy           User?                 @relation("CouponDeletedBy", fields: [deleted_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  couponProducts      CouponProduct[]
  CouponCustomerUsage CouponCustomerUsage[]
  Order               Order[]

  @@index([id], name: "idx_coupon_id")
  @@index([code], name: "idx_coupon_code")
}

model CouponProduct {
  id         Int @id @default(autoincrement())
  coupon_id  Int
  product_id Int

  coupon  Coupon  @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CouponCustomerUsage {
  id            Int    @id @default(autoincrement())
  coupon_id     Int
  customer_cnic String @db.VarChar(25)
  coupon_use    Int    @default(1)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  coupon Coupon @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id                    Int         @id @default(autoincrement())
  order_code            String      @unique @db.VarChar(100)
  create_date           String
  parent_id             Int?
  customer_name         String      @db.VarChar(100)
  customer_cnic         String?     @db.VarChar(20)
  customer_dob          String?
  customer_email        String?     @db.VarChar(150)
  customer_contact      String?     @db.VarChar(50)
  customer_address      String?     @db.VarChar(255)
  customer_city         String?     @db.VarChar(100)
  customer_occupation   String?     @db.VarChar(100)
  status                OrderStatus @default(pending)
  payment_method_id     Int
  payment               String      @default("0.00")
  coupon_id             Int?
  discount_amount       String      @default("0.00")
  received_premium      String      @default("0.00")
  branch_id             Int?
  branch_name           String?     @db.VarChar(150)
  agent_id              Int?
  agent_name            String?     @db.VarChar(150)
  client_id             Int?
  development_office_id Int?
  shipping_method       String?     @db.VarChar(100)
  shipping_charges      String      @default("0.00")
  shipping_name         String?     @db.VarChar(150)
  shipping_address      String?     @db.VarChar(255)
  shipping_email        String?     @db.VarChar(150)
  shipping_phone        String?     @db.VarChar(50)
  tracking_number       String?     @db.VarChar(100)
  courier_status        String?     @db.VarChar(50)
  delivery_date         String?
  refunded              Boolean     @default(false)
  staff_comments        String?     @db.Text
  cc_transaction_id     String?     @db.VarChar(100)
  cc_approval_code      String?     @db.VarChar(100)
  jazzcash_date_time    String?
  channel               String?     @db.VarChar(100)
  idev                  String?     @db.VarChar(100)
  referred_by           String?     @db.VarChar(100)
  kiosk_pin             String?     @db.VarChar(20)
  kiosk_last_digit      String?     @db.VarChar(5)
  test_book             Boolean     @default(false)
  api_user_id           Int?
  renewal_number        String?
  pec_coverage          String?
  created_by            Int
  deleted_by            Int?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  payemntMethod      PaymentMode         @relation(fields: [payment_method_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coupon             Coupon?             @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch             Branch?             @relation(fields: [branch_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agent              Agent?              @relation(fields: [agent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  client             Client?             @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  developmentOfficer DevelopmentOfficer? @relation(fields: [development_office_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiUser            ApiUser?            @relation(fields: [api_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser      User                @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Policy Policy[]

  @@index([id], name: "idx_order_id")
  @@index([order_code], name: "idx_order_ordercode")
}

model Policy {
  id                   Int     @id @default(autoincrement())
  policy_code          String? @unique @db.VarChar(100)
  igis_policy_code     String? @db.VarChar(100)
  pmdc_no              String? @db.VarChar(50)
  order_id             Int
  parent_id            Int?
  plan_id              Int
  product_id           Int
  product_option_id    Int
  extended_warranty_id Int?
  api_user_id          Int?

  issue_date  String
  start_date  String
  expiry_date String

  item_price         String
  received_premium   String @default("0.00")
  discount_amount    String @default("0.00")
  sum_insured        String
  filer_tax_per_item String @default("0.00")
  filer_tax_total    String @default("0.00")

  filer_tax_status Boolean @default(false)

  status PolicyStatus @default(pending)

  type         String? @db.VarChar(50)
  product_type String? @db.VarChar(50)

  takaful_policy Boolean @default(false)
  is_renewed     Boolean @default(false)
  refunded       Boolean @default(false)

  quantity Int @default(1)

  qr_doc_url String? @db.VarChar(255)
  schengen   Boolean @default(false)

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  order         Order         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  plan          Plan          @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product       Product       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productOption ProductOption @relation(fields: [product_option_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiUser       ApiUser?      @relation(fields: [api_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User          @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  policyDetails            PolicyDetail[]
  PolicyTravel             PolicyTravel[]
  PolicyHomecare           PolicyHomecare[]
  PolicyPurchaseProtection PolicyPurchaseProtection[]
  FblPolicyRider           FblPolicyRider[]

  @@index([id], name: "idx_policy_id")
  @@index([policy_code], name: "idx_policy_code")
}

model PolicyDetail {
  id        Int @id @default(autoincrement())
  policy_id Int

  name            String  @db.VarChar(100)
  dob             String?
  cnic            String? @db.VarChar(20)
  occupation      String? @db.VarChar(100)
  address         String? @db.VarChar(255)
  contact_number  String? @db.VarChar(20)
  email           String? @db.VarChar(150)
  city            String? @db.VarChar(100)
  gender          Gender?
  age             Int?
  type            String  @db.VarChar(50)
  relation        String? @db.VarChar(50)
  passport_no     String? @db.VarChar(50)
  poc             String? @db.VarChar(50)
  nicop           String? @db.VarChar(50)
  cnic_issue_date String?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  policy        Policy @relation(fields: [policy_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User   @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_policy_detail_id")
  @@index([policy_id], name: "idx_policy_id")
}

model PolicyTravel {
  id                  Int       @id @default(autoincrement())
  policy_id           Int
  sponsor             String?   @db.VarChar(150)
  sponsor_address     String?   @db.VarChar(255)
  sponsor_contact     String?   @db.VarChar(50)
  institute           String?   @db.VarChar(150)
  travel_from         String    @db.VarChar(150)
  travelling_dates    String?   @db.VarChar(255)
  program             String?   @db.VarChar(150)
  offer_letter_ref_no String?   @db.VarChar(100)
  no_of_days          String    @db.VarChar(50)
  travel_purpose      String?   @db.VarChar(255)
  destination         String    @db.VarChar(150)
  tution_fee          Boolean   @default(false)
  type                String?   @db.VarChar(100)
  travel_end_date     String
  travel_start_date   String
  program_duration    String?   @db.VarChar(100)
  travel_type         String?   @db.VarChar(100)
  is_active           Boolean   @default(true)
  is_deleted          Boolean   @default(false)
  created_by          Int
  deleted_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  deleted_at          DateTime?

  // relations
  policy        Policy @relation(fields: [policy_id], references: [id])
  createdByUser User   @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_policy_travel_id")
  @@index([policy_id], name: "idx_policy_travel_policy_id")
}

model PolicyHomecare {
  id               Int       @id @default(autoincrement())
  policy_id        Int
  ownership_status String    @db.VarChar(100)
  structure_type   String    @db.VarChar(100)
  plot_area        String    @db.VarChar(100)
  address          String    @db.VarChar(255)
  city             String    @db.VarChar(100)
  building         String?   @default("00.00") @db.VarChar(100)
  rent             String?   @default("00.00")
  content          String?   @default("00.00")
  jewelry          String?   @default("00.00")
  is_active        Boolean   @default(true)
  is_deleted       Boolean   @default(false)
  created_by       Int
  deleted_by       Int?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  // Relations
  policy        Policy @relation(fields: [policy_id], references: [id], onDelete: Cascade)
  createdByUser User   @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_policy_homecare_id")
  @@index([policy_id], name: "idx_policy_homecare_policy_id")
}

model PolicyPurchaseProtection {
  id               Int          @id @default(autoincrement())
  policy_id        Int
  name             String       @db.VarChar(255)
  imei             String?      @db.VarChar(50)
  serial_number    String?      @db.VarChar(100)
  retailer_sku     String?      @db.VarChar(100)
  quantity         Int          @default(1)
  sum_insured      String
  total_price      String
  item_price       String
  received_premium String
  duration         Int
  duration_type    DurationType
  is_active        Boolean      @default(true)
  is_deleted       Boolean      @default(false)
  created_by       Int
  deleted_by       Int?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  deleted_at       DateTime?

  // Relation
  policy        Policy @relation(fields: [policy_id], references: [id])
  createdByUser User   @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_policy_purchase_protection_id")
  @@index([policy_id], name: "idx_policy_purchase_protection_policy_id")
}

model FblPolicyRider {
  id          Int    @id @default(autoincrement())
  policy_id   Int
  rider_name  String @db.VarChar(50)
  sum_insured String

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_by Int
  deleted_by Int?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  policy        Policy @relation(fields: [policy_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User   @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// PUT LOGS TABLES HERE UNDER THIS COMMENT
model AllActivityLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  method        String?
  path          String?
  contentLength Int?
  responseTime  Float?
  requestBody   String?
  payload       String?  @db.LongText
  databaseQuery String?  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunicationLog {
  id             Int                     @id @default(autoincrement())
  recipient      String                  @db.VarChar(255)
  recipientName  String?                 @db.VarChar(255)
  channel        CommunicationLogChannel
  messageSubject String?                 @db.VarChar(255)
  messageBody    String                  @db.LongText
  status         CommunicationLogStatus  @default(pending)
  responseCode   String?                 @db.VarChar(255)
  responseBody   String?                 @db.Text
  sentBy         String?                 @db.VarChar(255)
  sentAt         DateTime?
  createdAt      DateTime                @default(now())
  errorMessage   String?                 @db.Text

  @@index([channel, status], name: "idx_channel_status")
}
